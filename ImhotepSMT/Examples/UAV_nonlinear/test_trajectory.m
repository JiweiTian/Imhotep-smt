function [xtraj, ttraj, terminate_cond] = test_trajectory(start, stop, map, path, noise_flag, attack_flag, SMT_flag)
% TEST_TRAJECTORY simulates the robot from START to STOP following a PATH
% that's been planned for MAP.
% start - a 3d vector or a cell contains multiple 3d vectors
% stop  - a 3d vector or a cell contains multiple 3d vectors
% map   - map generated by your load_map
% path  - n x 3 matrix path planned by your dijkstra algorithm


%Controller and trajectory generator handles
controlhandle = @LinearController;
trajhandle    = @trajectory_generator;

% Make cell
if ~iscell(start), start = {start}; end
if ~iscell(stop),  stop  = {stop}; end
if ~iscell(path),  path  = {path} ;end

% Get nquad
nquad = length(start);

% Make column vector
for qn = 1:nquad
    start{qn} = start{qn}(:);
    stop{qn} = stop{qn}(:);
end

% Quadrotor model
params = nanoplus();

%% **************************** FIGURES *****************************
% Environment figure
h_fig = figure('Name', 'Environment');
h_3d = gca;
drawnow;
ylabel('y [m]','FontSize',26);
zlabel('z [m]','FontSize',26);
xlabel('x [m]','FontSize',26);
axis([-1 3 -1 3 -1 3]);
view(3);
% axis equal;
grid on;
quadcolors = lines(nquad);
set(gcf,'Renderer','OpenGL')
set(h_fig, 'KeyPressFcn', @(h_fig, evt)MyKeyPress_Cb(evt.Key));
%% *********************** INITIAL CONDITIONS ***********************
fprintf('Setting initial conditions...\n')
% Maximum time that the quadrotor is allowed to fly
time_tol = 50;          % maximum simulation time
starttime = 0;          % start of simulation in seconds
global tstep cstep
tstep     = 1E-2;       % this determines the time step at which the solution is given
cstep     = 0.05;       % image capture time interval
nstep     = cstep/tstep;
time      = starttime;  % current time
max_iter  = time_tol / cstep;      % max iteration


for qn = 1:nquad
    % Get start and stop position
    x0{qn}    = init_state( start{qn} );
    xtraj{qn} = zeros(max_iter*nstep, length(x0{qn}));
    ttraj{qn} = zeros(max_iter*nstep, 1);
    execTimeTraj{qn} = zeros(max_iter*nstep, 1);
    attackedSensTraj{qn} = zeros(max_iter*nstep, 1);
    xhatTraj{qn} = zeros(max_iter*nstep, length(x0{qn}));
    attackTraj{qn} = zeros(max_iter*nstep, 3);
end
x = x0;        % state

%% ************************* RUN SIMULATION *************************
global key;
key = -1;
rpy = zeros(3,1);
fprintf('Simulation Running....\n')
iter = 0;
% Main loop
while key ~= 'q'
    iter = iter + 1;
    timeint = time:tstep:time+cstep;

    tic;
    % Iterate over each quad
    for qn = 1:nquad
        % Initialize quad plot
        if iter == 1
%             QP{qn} = QuadPlot(qn, x0{qn}, 0.1, 0.04, quadcolors(qn,:), max_iter, h_3d);
            QP{qn} = QuadPlot(qn, x0{qn}, params.arm_mat, 0.04, quadcolors(qn,:), max_iter, h_3d);
            desired_state = trajhandle(time, qn);
            QP{qn}.UpdateQuadPlot(x{qn}, [desired_state.pos; desired_state.vel], time);
            %h_title = title(sprintf('\niteration: %d, time: %4.2f\n\npress "q" to quit ', iter, time));
            
            
            h_legend = legend('Actual trajectory', 'Desired trajectory', 'Location', 'NorthEastOutside');
            set(h_legend,'FontSize',26);

            %pause(5.0);
        end
        
        % Run simulation
        %if attack_flag
            %[tsave, xsave] = ode45(@(t,s) quadEOM_attack(t, s, qn, controlhandle, trajhandle, params), timeint, x{qn});
            [tsave, xsave, xhat, attack, execTime, attackedSensor] = quadEOM_attack(timeint, x{qn}, qn, controlhandle, trajhandle, params, attack_flag, SMT_flag);
        %else
        %    [tsave, xsave] = ode45(@(t,s) quadEOM(t, s, qn, controlhandle, trajhandle, params), timeint, x{qn});
        %end
        x{qn}    = xsave(end, :)';

        % add noise
        if noise_flag
            x{qn} = add_noise(x{qn});
        end
       
        % Save to traj
        xtraj{qn}((iter-1)*nstep+1:iter*nstep,:)    = xsave(1:end-1,:);
        ttraj{qn}((iter-1)*nstep+1:iter*nstep)      = tsave(1:end-1);
        execTimeTraj{qn}(iter)                      = execTime;
        attackedSensTraj{qn}(iter)                  = attackedSensor;
        attackTraj{qn}(iter,:)                      = attack';
        xhatTraj{qn}(iter,:)                        = xhat';
        
        % Update quad plot
        desired_state = trajhandle(time + cstep, qn);
        QP{qn}.UpdateQuadPlot(x{qn}, [desired_state.pos; desired_state.vel], time + cstep);
    end
    [phi, theta, psi] = RotToRPY_ZXY(QP{qn}.rot');
    rpy = [rpy,[phi;theta;psi]];
    %set(h_title, 'String', sprintf('\niteration: %d, time: %4.2f\n\npress "q" to quit ', iter, time + cstep))
    time = time + cstep; % Update simulation time
    t = toc;

    % Pause to make real-time
    if (t < cstep)
        pause(cstep - t);
    end
end
key = -1;
%% ************************* POST PROCESSING *************************
% Truncate xtraj and ttraj
for qn = 1:nquad
    xtraj{qn}               = xtraj{qn}(1:iter*nstep,:);
    ttraj{qn}               = ttraj{qn}(1:iter*nstep);
    execTimeTraj{qn}        = execTimeTraj{qn}(1:iter);
    attackedSensTraj{qn}    = attackedSensTraj{qn}(1:iter);
    attackTraj{qn}          = attackTraj{qn}(1:iter,:);
    xhatTraj{qn}            = xhatTraj{qn}(1:iter,:);
end



% Plot the saved position and velocity of each robot
for qn = 1:nquad
    % Truncate saved variables
    QP{qn}.TruncateHist();
    % Plot position for each quad
    h_pos{qn} = figure('Name', ['Quad ' num2str(qn) ' : position']);
    plot_state(h_pos{qn}, QP{qn}.state_hist(1:3,:), QP{qn}.time_hist, 'pos', 'vic');
    plot_state(h_pos{qn}, QP{qn}.state_des_hist(1:3,:), QP{qn}.time_hist, 'pos', 'des');
    % Plot orientation for each quad
    h_ori{qn} = figure('Name', ['Quad ' num2str(qn) ' : euler']);
    plot_state(h_ori{qn}, rpy, QP{qn}.time_hist, 'euler', 'vic');
    % Plot velocity for each quad
    h_vel{qn} = figure('Name', ['Quad ' num2str(qn) ' : velocity']);
    plot_state(h_vel{qn}, QP{qn}.state_hist(4:6,:), QP{qn}.time_hist, 'vel', 'vic');
    plot_state(h_vel{qn}, QP{qn}.state_des_hist(4:6,:), QP{qn}.time_hist, 'vel', 'des');
    plot_state(h_vel{qn}, xhatTraj{qn}(:,4:6)', QP{qn}.time_hist(1:iter), 'vel', 'est');
end


%% Plot attack detection

line_width = 2;

avgExecTime = mean(execTimeTraj{qn})

figure('Name', 'Execution Time'); 
plot(QP{qn}.time_hist(1:iter), execTimeTraj{qn}, 'LineWidth', line_width);

figure('Name', 'Attack Detection vs Attack'); 
subplot(2,1,1)
stem(QP{qn}.time_hist(1:iter), attackedSensTraj{qn},'LineWidth', line_width);
subplot(2,1,2);
plot(QP{qn}.time_hist(1:iter), attackTraj{qn}(:,3),'LineWidth', line_width);



%% Save results
qn = 1;

file_location = './testresults/';
if SMT_flag
    file_prefix = '_SMT';
else
    file_prefix = '_noSMT';
end

if attack_flag == 0
    file_prefix = '_noAttack';
end

% State
data = [QP{qn}.time_hist', QP{qn}.state_hist(1,:)'];
save([file_location 'state_x' file_prefix '.txt'], 'data','-ascii','-double')

data = [QP{qn}.time_hist', QP{qn}.state_hist(2,:)'];
save([file_location 'state_y' file_prefix '.txt'], 'data','-ascii','-double')

data = [QP{qn}.time_hist', QP{qn}.state_hist(3,:)'];
save([file_location 'state_z' file_prefix '.txt'], 'data','-ascii','-double')

% velocity
data = [QP{qn}.time_hist', QP{qn}.state_hist(4,:)'];
save([file_location 'state_vx' file_prefix '.txt'], 'data','-ascii','-double')

data = [QP{qn}.time_hist', QP{qn}.state_hist(5,:)'];
save([file_location 'state_vy' file_prefix '.txt'], 'data','-ascii','-double')

data = [QP{qn}.time_hist', QP{qn}.state_hist(6,:)'];
save([file_location 'state_vz' file_prefix '.txt'], 'data','-ascii','-double')

% estimated velocit
data = [QP{qn}.time_hist(1:iter)', xhatTraj{qn}(:,4)];
save([file_location 'state_vx_hat' file_prefix '.txt'], 'data','-ascii','-double')

data = [QP{qn}.time_hist(1:iter)', xhatTraj{qn}(:,5)];
save([file_location 'state_vy_hat' file_prefix '.txt'], 'data','-ascii','-double')

data = [QP{qn}.time_hist(1:iter)', xhatTraj{qn}(:,6)];
save([file_location 'state_vz_hat' file_prefix '.txt'], 'data','-ascii','-double')

% attack
data = [QP{qn}.time_hist(1:iter)', attackTraj{qn}(:,3)];
save([file_location 'attack_vz' file_prefix '.txt'], 'data','-ascii','-double')


% estimation error
data = [QP{qn}.time_hist(1:iter)', QP{qn}.state_hist(4,1:iter)' - xhatTraj{qn}(:,4)];
save([file_location 'error_vx_hat' file_prefix '.txt'], 'data','-ascii','-double')

data = [QP{qn}.time_hist(1:iter)', QP{qn}.state_hist(5,1:iter)' - xhatTraj{qn}(:,5)];
save([file_location 'error_vy_hat' file_prefix '.txt'], 'data','-ascii','-double')

data = [QP{qn}.time_hist(1:iter)', QP{qn}.state_hist(6,1:iter)' - xhatTraj{qn}(:,6)];
save([file_location 'error_vz_hat' file_prefix '.txt'], 'data','-ascii','-double')


end

